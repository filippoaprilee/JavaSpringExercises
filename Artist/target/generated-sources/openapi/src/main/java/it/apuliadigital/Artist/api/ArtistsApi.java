/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.apuliadigital.Artist.api;

import it.apuliadigital.Artist.model.Artist;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-13T13:53:22.197198400+02:00[Europe/Rome]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "artist", description = "the artist API")
public interface ArtistsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /artists : Create a new artist
     * Add a new artist to the database
     *
     * @param artist Data for the new artist (required)
     * @return Artist created (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "createArtist",
        summary = "Create a new artist",
        description = "Add a new artist to the database",
        tags = { "artist" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Artist created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Artist.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/artists",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Artist> createArtist(
        @Parameter(name = "Artist", description = "Data for the new artist", required = true) @Valid @RequestBody Artist artist
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /artists/{artistId} : Delete an artist
     * Delete an artist by ID
     *
     * @param artistId  (required)
     * @return Artist deleted (status code 200)
     *         or Artist not found (status code 404)
     */
    @Operation(
        operationId = "deleteArtist",
        summary = "Delete an artist",
        description = "Delete an artist by ID",
        tags = { "artist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Artist deleted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Artist.class))
            }),
            @ApiResponse(responseCode = "404", description = "Artist not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/artists/{artistId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Artist> deleteArtist(
        @Parameter(name = "artistId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("artistId") Long artistId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /artists : List all artists
     * Returns a list of all artists
     *
     * @return Operation successful (status code 200)
     *         or No artists found (status code 404)
     */
    @Operation(
        operationId = "getAllArtists",
        summary = "List all artists",
        description = "Returns a list of all artists",
        tags = { "artist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operation successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Artist.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No artists found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/artists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Artist>> getAllArtists(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" }, { \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /artists/{artistId} : Retrieve a single artist
     * Get the details of an artist by ID
     *
     * @param artistId  (required)
     * @return Operation successful (status code 200)
     *         or Artist not found (status code 404)
     */
    @Operation(
        operationId = "getArtistById",
        summary = "Retrieve a single artist",
        description = "Get the details of an artist by ID",
        tags = { "artist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Artist.class))
            }),
            @ApiResponse(responseCode = "404", description = "Artist not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/artists/{artistId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Artist> getArtistById(
        @Parameter(name = "artistId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("artistId") Long artistId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /artists/nationality/{nationality} : List artists by nationality
     * Get all artists of a specific nationality
     *
     * @param nationality  (required)
     * @return Operation successful (status code 200)
     *         or No artists found for this nationality (status code 404)
     */
    @Operation(
        operationId = "getArtistsByNationality",
        summary = "List artists by nationality",
        description = "Get all artists of a specific nationality",
        tags = { "artist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operation successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Artist.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No artists found for this nationality")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/artists/nationality/{nationality}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Artist>> getArtistsByNationality(
        @Parameter(name = "nationality", description = "", required = true, in = ParameterIn.PATH) @PathVariable("nationality") String nationality
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" }, { \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /artists/year/{year} : List artists by birth year
     * Get all artists born in a specific year
     *
     * @param year  (required)
     * @return Operation successful (status code 200)
     *         or No artists found for this year (status code 404)
     */
    @Operation(
        operationId = "getArtistsByYear",
        summary = "List artists by birth year",
        description = "Get all artists born in a specific year",
        tags = { "artist" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operation successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Artist.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No artists found for this year")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/artists/year/{year}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Artist>> getArtistsByYear(
        @Parameter(name = "year", description = "", required = true, in = ParameterIn.PATH) @PathVariable("year") Integer year
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" }, { \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /artists/{artistId} : Update an artist
     * Update the details of an existing artist
     *
     * @param artistId  (required)
     * @param artist Updated artist data (required)
     * @return Artist updated (status code 204)
     *         or Artist not found (status code 404)
     */
    @Operation(
        operationId = "updateArtist",
        summary = "Update an artist",
        description = "Update the details of an existing artist",
        tags = { "artist" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Artist updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Artist.class))
            }),
            @ApiResponse(responseCode = "404", description = "Artist not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/artists/{artistId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Artist> updateArtist(
        @Parameter(name = "artistId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("artistId") Long artistId,
        @Parameter(name = "Artist", description = "Updated artist data", required = true) @Valid @RequestBody Artist artist
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stageName\" : \"stageName\", \"nationality\" : \"nationality\", \"birthYear\" : 6, \"surname\" : \"surname\", \"name\" : \"name\", \"genre\" : \"pop\", \"id\" : 0, \"biography\" : \"biography\", \"type\" : \"solo\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
