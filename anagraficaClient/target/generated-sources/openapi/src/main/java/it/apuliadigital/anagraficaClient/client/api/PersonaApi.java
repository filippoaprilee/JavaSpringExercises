/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.apuliadigital.anagraficaClient.client.api;

import it.apuliadigital.anagraficaClient.client.model.PersonaClient;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-15T22:59:29.338477800+02:00[Europe/Rome]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "persona", description = "the persona API")
public interface PersonaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /persona : Crea una nuova persona
     * Crea una nuova persona nell&#39;anagrafica
     *
     * @param personaClient  (required)
     * @return Persona creata con successo (status code 201)
     *         or Errore nella richiesta (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "creaPersona",
        summary = "Crea una nuova persona",
        description = "Crea una nuova persona nell'anagrafica",
        tags = { "persona" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Persona creata con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonaClient.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella richiesta"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/persona",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonaClient> creaPersona(
        @Parameter(name = "PersonaClient", description = "", required = true) @Valid @RequestBody PersonaClient personaClient
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numeriTelefonici\" : { \"fisso\" : \"091123456\", \"cellulare\" : \"3331234567\" }, \"dataNascita\" : \"1990-01-01\", \"cognome\" : \"Calogero\", \"elencoIndirizziEmail\" : [ \"email1@email.com\", \"email2@email.com\" ], \"nome\" : \"Franco\", \"idAnagrafica\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /persona/{idAnagrafica} : Elimina una persona
     * Elimina una persona presente nell&#39;anagrafica
     *
     * @param idAnagrafica L&#39;ID dell&#39;anagrafica (required)
     * @return Persona eliminata con successo (status code 200)
     *         or Persona non trovata (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "eliminaPersona",
        summary = "Elimina una persona",
        description = "Elimina una persona presente nell'anagrafica",
        tags = { "persona" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Persona eliminata con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonaClient.class))
            }),
            @ApiResponse(responseCode = "404", description = "Persona non trovata"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/persona/{idAnagrafica}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonaClient> eliminaPersona(
        @Parameter(name = "idAnagrafica", description = "L'ID dell'anagrafica", required = true, in = ParameterIn.PATH) @PathVariable("idAnagrafica") Long idAnagrafica
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numeriTelefonici\" : { \"fisso\" : \"091123456\", \"cellulare\" : \"3331234567\" }, \"dataNascita\" : \"1990-01-01\", \"cognome\" : \"Calogero\", \"elencoIndirizziEmail\" : [ \"email1@email.com\", \"email2@email.com\" ], \"nome\" : \"Franco\", \"idAnagrafica\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persona : Restituisce la lista delle persone
     * Restituisce la lista delle persone presenti nell&#39;anagrafica
     *
     * @return Lista delle persone (status code 200)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "listaPersone",
        summary = "Restituisce la lista delle persone",
        description = "Restituisce la lista delle persone presenti nell'anagrafica",
        tags = { "persona" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista delle persone", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PersonaClient.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persona",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PersonaClient>> listaPersone(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"numeriTelefonici\" : { \"fisso\" : \"091123456\", \"cellulare\" : \"3331234567\" }, \"dataNascita\" : \"1990-01-01\", \"cognome\" : \"Calogero\", \"elencoIndirizziEmail\" : [ \"email1@email.com\", \"email2@email.com\" ], \"nome\" : \"Franco\", \"idAnagrafica\" : 1 }, { \"numeriTelefonici\" : { \"fisso\" : \"091123456\", \"cellulare\" : \"3331234567\" }, \"dataNascita\" : \"1990-01-01\", \"cognome\" : \"Calogero\", \"elencoIndirizziEmail\" : [ \"email1@email.com\", \"email2@email.com\" ], \"nome\" : \"Franco\", \"idAnagrafica\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /persona/{idAnagrafica} : Modifica una persona
     * Modifica una persona presente nell&#39;anagrafica
     *
     * @param idAnagrafica L&#39;ID dell&#39;anagrafica (required)
     * @param personaClient  (required)
     * @return Persona modificata con successo (status code 200)
     *         or Errore nella richiesta (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "modificaPersona",
        summary = "Modifica una persona",
        description = "Modifica una persona presente nell'anagrafica",
        tags = { "persona" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Persona modificata con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonaClient.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella richiesta"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/persona/{idAnagrafica}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonaClient> modificaPersona(
        @Parameter(name = "idAnagrafica", description = "L'ID dell'anagrafica", required = true, in = ParameterIn.PATH) @PathVariable("idAnagrafica") Long idAnagrafica,
        @Parameter(name = "PersonaClient", description = "", required = true) @Valid @RequestBody PersonaClient personaClient
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numeriTelefonici\" : { \"fisso\" : \"091123456\", \"cellulare\" : \"3331234567\" }, \"dataNascita\" : \"1990-01-01\", \"cognome\" : \"Calogero\", \"elencoIndirizziEmail\" : [ \"email1@email.com\", \"email2@email.com\" ], \"nome\" : \"Franco\", \"idAnagrafica\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persona/{idAnagrafica} : Restituisce una persona
     * Restituisce una persona presente nell&#39;anagrafica
     *
     * @param idAnagrafica L&#39;ID dell&#39;anagrafica (required)
     * @return Persona trovata (status code 200)
     *         or Persona non trovata (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "persona",
        summary = "Restituisce una persona",
        description = "Restituisce una persona presente nell'anagrafica",
        tags = { "persona" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Persona trovata", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonaClient.class))
            }),
            @ApiResponse(responseCode = "404", description = "Persona non trovata"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persona/{idAnagrafica}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonaClient> persona(
        @Parameter(name = "idAnagrafica", description = "L'ID dell'anagrafica", required = true, in = ParameterIn.PATH) @PathVariable("idAnagrafica") Long idAnagrafica
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numeriTelefonici\" : { \"fisso\" : \"091123456\", \"cellulare\" : \"3331234567\" }, \"dataNascita\" : \"1990-01-01\", \"cognome\" : \"Calogero\", \"elencoIndirizziEmail\" : [ \"email1@email.com\", \"email2@email.com\" ], \"nome\" : \"Franco\", \"idAnagrafica\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
