openapi: 3.0.3
info:
  title: Album API
  description: >-
    Api per la gestione di album musicali. Permette di cercare, aggiungere,
    rimuovere, modificare album dal database
  contact:
    email: faprile@studenti.apuliadigitalmaker.it
  version: 1.0.0
tags:
  - name: album
    description: Everything about your Albums
paths:
  /album:
    post:
      tags:
        - album
      summary: Add a new album to the store
      description: Add a new album to the store
      operationId: addAlbum
      requestBody:
        description: Create a new album in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
            application/xml:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - album
      summary: Retrieve all albums
      description: Returns a list of all albums
      operationId: getAllAlbums
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: Invalid request
  /album/findByGenre:
    get:
      tags:
        - album
      summary: Finds Albums by genre
      description: Multiple genre values can be provided with comma separated strings
      operationId: findAlbumsByGenres
      parameters:
        - name: genre
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: rock
            enum:
              - rock
              - pop
              - country
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: Invalid status value
  /album/findByTitle:
    get:
      tags:
        - album
      summary: Finds Albums by title
      description: Retrieves albums that match the specified title
      operationId: findAlbumsByTitle
      parameters:
        - name: title
          in: query
          description: Title of the album to search for
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: Invalid title value
  /album/findByAvailability:
    get:
      tags:
        - album
      summary: Finds Albums by availability
      description: Retrieves albums based on their availability status
      operationId: findAlbumsByAvailability
      parameters:
        - name: isAvailable
          in: query
          description: Filter albums based on their availability
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: Invalid availability value
  /search-album:
    get:
      tags:
        - album
      summary: Search for albums by title and genre
      description: You can search for albums using the title and genre as query parameters.
      operationId: searchAlbums
      parameters:
        - name: title
          in: query
          description: Title of the album to search for
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Genre of the album to search for
          required: false
          schema:
            type: string
            enum:
              - rock
              - pop
              - country
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumList'
        '400':
          description: Invalid request
  /album/{albumId}:
    get:
      tags:
        - album
      summary: Find album by ID
      description: Returns a single album
      operationId: getAlbumById
      parameters:
        - name: albumId
          in: path
          description: ID of album to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
            application/xml:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found
    put:
      tags:
        - album
      summary: Update an existing album
      description: Update an existing album by Id
      operationId: updateAlbum
      parameters:
        - name: albumId
          in: path
          description: ID of album to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent album in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
          application/xml:
            schema:
              $ref: '#/components/schemas/Album'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
            application/xml:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found
        '422':
          description: Validation exception
    delete:
      tags:
        - album
      summary: Delete an album
      description: Delete an album
      operationId: deleteAlbum
      parameters:
        - name: albumId
          in: path
          description: Album id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid album value
  /album/{albumId}/add-band:
    post:
      tags:
        - album
      summary: Add a band to an existing album
      description: Adds a band to the specified album using the album ID as a query parameter and the band details in the request body.
      operationId: addBandToAlbum
      parameters:
        - name: albumId
          in: path
          description: ID of the album to which the band will be added
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Band details to add to the album
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Band'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found
components:
  schemas:
    Album:
      type: object
      properties:
        idAlbum:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Master Of Puppets
        author:
          type: string
          example: Metallica
        dataPublish:
          type: string
          format: date-time
        genre:
          type: string
          description: Genere Album
          example: metal
          enum:
            - rock
            - pop
            - metal
            - jazz
            - grunge
            - classica
            - leggera
        isAvailable:
          type: boolean
        songs:
          type: array
          items:
            type: string
        band:
          type: object
          items:
            $ref: '#/components/schemas/Band'
        year:
          type: integer
          example: 1984

    AlbumList:
      type: array
      items:
        $ref: '#/components/schemas/Album'
    
    Band:
      type: object
      additionalProperties:
        type: string
        example:
          {"Plants": "prova"}


        